test_score
adj_mat
test_score
test_pwm
test_mat
trans_mat
test_score
adj_mat
test_pwm
drawonesample(0.2)
test_score
test_score^theta
theta <- 0.2
test_score^theta
theta
delta
uantile(scores, 0.9)
quantile(scores, 0.9)
quantile(scores, 0.95)
summary(scores)
hist(c(scores)
)
p=5/26100
allp
p_values_9
summary(p_values_9[,1])
plot(p_values_9[,1]~score_diff)
plot(p_values_1[,1]~score_diff)
motif.lib <- motif_library
snp.info <- snpInfo
dim(snpInfo$sequence)
motif.scores <- motif_scores$motif.scores
dim(motif.scores)
motifid <- 1
score.p
l <- 1
for(l in seq(length(allp))) {
source("~/atSNP/R/utility.R")
for(l in seq(length(allp))) {
for(l in seq(length(allp))) {
score.p
summary(pval_diff[,1])
pwm
adj_pwm
wei_mat
wei.mat
score.p[l]
score.p=20
l=1
score.p
l=1
test_pwm
adj_mat
adj_mat
plot(p_values_9[,1]~score_diff)
plot(p_values_9[,1]~score_diff)
mean(score_diff <=1.5)
diff(log(y[95:96]))
diff(log(y[93+seq(2)]))
diff(log(y[93+seq(2)]))*100
diff(log(y[93+seq(3)]))*100
diff(log(y[94+seq(2)]))*100
max(p_values_9[,1])
mean(score_diff <= 2.19)
test_score
apply(log(test_score), 1, mean)
log(test_score[1,])
test_pwm[1,]
sum(test_pwm[1,] * log(test_score[1,]))
target_freq
round(emp_freq1 - emp_freq2, 2)
round(target_freq- emp_freq2, 2)
round(target_freq- emp_freq1, 2)
round(emp_freq1 - target_freq, 2)
round(emp_freq2 - target_freq, 2)
adj_mat
x=0.1
test_score
theta
test_score ^ theta
summary(wei)
summary(wei)
mean(wei)
x
summary(const / wei)
summary(log(const / wei))
mean(log_diff)
sample_score
sample
test_score
summary(sc)
summary(sc)
quantile(scores,0.9)
quantile(scores,0.1)
quantile(score_diff,0.1)
quantile(score_diff,0.9)
summary(log_diff)
mean(wei)
adj_mat <- test_pwm
summary(wei)
summary(sc)
summary(log_diff)
x
adj_mat
summary(sc)
summary(wei)
summary(log_diff)
hist(log_diff)
motifid
motifid <- 1
snp.info <- snpInfo
motif.scores <- motif_scores$motif.scores
motif.lib <- motif_library
source("~/atSNP/R/utility.R")
plot(pval_a[,1]~c(scores))
dim(pval_a)
plot(pval_a[,1]~scores[,1])
motifid <- 5
plot(pval_diff[,1]~score_diff)
plot(pval_a[,1]~scores[,1])
